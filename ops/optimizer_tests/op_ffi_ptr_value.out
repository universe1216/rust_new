#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_ffi_ptr_value::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_ffi_ptr_value;
#[doc(hidden)]
impl op_ffi_ptr_value {
    pub fn name() -> &'static str {
        stringify!(op_ffi_ptr_value)
    }
    pub fn v8_fn_ptr<'scope>() -> deno_core::v8::FunctionCallback {
        use deno_core::v8::MapFnTo;
        Self::v8_func.map_fn_to()
    }
    pub fn decl<'scope>() -> deno_core::OpDecl {
        deno_core::OpDecl {
            name: Self::name(),
            v8_fn_ptr: Self::v8_fn_ptr(),
            enabled: true,
            fast_fn: Some(
                Box::new(op_ffi_ptr_value_fast {
                    _phantom: ::std::marker::PhantomData,
                }),
            ),
            is_async: false,
            is_unstable: false,
            is_v8: false,
            force_registration: false,
        }
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    pub fn call(ptr: *mut c_void, out: &mut [u32]) {}
    pub fn v8_func<'scope>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    ) {
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let arg_0 = {
            let value = args.get(0usize as i32);
            if value.is_null() {
                std::ptr::null_mut()
            } else if let Ok(b)
                = deno_core::v8::Local::<deno_core::v8::External>::try_from(value) {
                b.value()
            } else {
                return deno_core::_ops::throw_type_error(
                    scope,
                    format!("Expected External at position {}", 0usize),
                );
            }
        };
        let arg_1 = if let Ok(view)
            = deno_core::v8::Local::<
                deno_core::v8::Uint32Array,
            >::try_from(args.get(1usize as i32)) {
            let (offset, len) = (view.byte_offset(), view.byte_length());
            let buffer = match view.buffer(scope) {
                Some(v) => v,
                None => {
                    return deno_core::_ops::throw_type_error(
                        scope,
                        format!("Expected Uint32Array at position {}", 1usize),
                    );
                }
            };
            if let Some(data) = buffer.data() {
                let store = data.cast::<u8>().as_ptr();
                unsafe {
                    ::std::slice::from_raw_parts_mut(
                        store.add(offset) as *mut u32,
                        len / 4,
                    )
                }
            } else {
                &mut []
            }
        } else {
            return deno_core::_ops::throw_type_error(
                scope,
                format!("Expected Uint32Array at position {}", 1usize),
            );
        };
        let result = Self::call(arg_0, arg_1);
        let op_state = ::std::cell::RefCell::borrow(&*ctx.state);
        op_state.tracker.track_sync(ctx.id);
    }
}
struct op_ffi_ptr_value_fast {
    _phantom: ::std::marker::PhantomData<()>,
}
impl<'scope> deno_core::v8::fast_api::FastFunction for op_ffi_ptr_value_fast {
    #[inline(always)]
    fn function(&self) -> *const ::std::ffi::c_void {
        op_ffi_ptr_value_fast_fn as *const ::std::ffi::c_void
    }
    #[inline(always)]
    fn args(&self) -> &'static [deno_core::v8::fast_api::Type] {
        use deno_core::v8::fast_api::Type::*;
        use deno_core::v8::fast_api::CType;
        &[V8Value, Pointer, TypedArray(CType::Uint32), CallbackOptions]
    }
    #[inline(always)]
    fn return_type(&self) -> deno_core::v8::fast_api::CType {
        deno_core::v8::fast_api::CType::Void
    }
}
fn op_ffi_ptr_value_fast_fn<'scope>(
    _: deno_core::v8::Local<deno_core::v8::Object>,
    ptr: *mut ::std::ffi::c_void,
    out: *const deno_core::v8::fast_api::FastApiTypedArray<u32>,
    fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
) -> () {
    use deno_core::v8;
    use deno_core::_ops;
    let out = match unsafe { &*out }.get_storage_if_aligned() {
        Some(v) => v,
        None => {
            unsafe { &mut *fast_api_callback_options }.fallback = true;
            return Default::default();
        }
    };
    let result = op_ffi_ptr_value::call(ptr, out);
    result
}

#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_is_proxy::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_is_proxy {
    _phantom_data: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_is_proxy {
    const NAME: &'static str = stringify!(op_is_proxy);
    const DECL: deno_core::OpDecl = deno_core::OpDecl {
        name: Self::name(),
        v8_fn_ptr: Self::v8_fn_ptr as _,
        enabled: true,
        fast_fn: {
            use deno_core::v8::fast_api::CType;
            use deno_core::v8::fast_api::Type::*;
            Some(
                deno_core::v8::fast_api::FastFunction::new(
                    &[V8Value, V8Value],
                    CType::Bool,
                    Self::op_is_proxy_fast_fn as *const ::std::ffi::c_void,
                ),
            )
        },
        is_async: false,
        is_unstable: false,
        is_v8: false,
        arg_count: 0,
    };
}
#[doc(hidden)]
impl op_is_proxy {
    pub const fn name() -> &'static str {
        stringify!(op_is_proxy)
    }
    #[allow(clippy::not_unsafe_ptr_arg_deref)]
    pub extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let info = unsafe { &*info };
        let scope = &mut unsafe { deno_core::v8::CallbackScope::new(info) };
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
            info,
        );
        let rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
        Self::v8_func(scope, args, rv);
    }
    pub const fn decl() -> deno_core::OpDecl {
        deno_core::OpDecl {
            name: Self::name(),
            v8_fn_ptr: Self::v8_fn_ptr as _,
            enabled: true,
            fast_fn: {
                use deno_core::v8::fast_api::CType;
                use deno_core::v8::fast_api::Type::*;
                Some(
                    deno_core::v8::fast_api::FastFunction::new(
                        &[V8Value, V8Value],
                        CType::Bool,
                        Self::op_is_proxy_fast_fn as *const ::std::ffi::c_void,
                    ),
                )
            },
            is_async: false,
            is_unstable: false,
            is_v8: false,
            arg_count: 1usize as u8,
        }
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    #[allow(clippy::extra_unused_lifetimes)]
    fn call<'scope>(value: serde_v8::Value) -> bool {
        value.v8_value.is_proxy()
    }
    pub fn v8_func<'scope>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    ) {
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let arg_0 = args.get(0usize as i32);
        let arg_0 = match deno_core::serde_v8::from_v8(scope, arg_0) {
            Ok(v) => v,
            Err(err) => {
                let msg = format!(
                    "Error parsing args at position {}: {}", 0usize,
                    deno_core::anyhow::Error::from(err)
                );
                return deno_core::_ops::throw_type_error(scope, msg);
            }
        };
        let result = Self::call(arg_0);
        let op_state = ::std::cell::RefCell::borrow(&*ctx.state);
        op_state.tracker.track_sync(ctx.id);
        match deno_core::serde_v8::to_v8(scope, result) {
            Ok(ret) => rv.set(ret),
            Err(err) => {
                deno_core::_ops::throw_type_error(
                    scope,
                    format!(
                        "Error serializing return: {}",
                        deno_core::anyhow::Error::from(err)
                    ),
                )
            }
        };
    }
}
impl op_is_proxy {
    #[allow(clippy::too_many_arguments)]
    fn op_is_proxy_fast_fn(
        _: deno_core::v8::Local<deno_core::v8::Object>,
        value: deno_core::v8::Local<deno_core::v8::Value>,
    ) -> bool {
        use deno_core::v8;
        use deno_core::_ops;
        let value = serde_v8::Value { v8_value: value };
        let result = Self::call(value);
        result
    }
}

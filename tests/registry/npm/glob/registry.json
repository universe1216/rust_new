{"name":"glob","dist-tags":{"latest":"10.4.4"},"versions":{"10.4.4":{"name":"glob","version":"10.4.4","author":{"url":"https://blog.izs.me/","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"ISC","_id":"glob@10.4.4","bugs":{"url":"https://github.com/isaacs/node-glob/issues"},"bin":{"glob":"dist/esm/bin.mjs"},"tap":{"before":"test/00-setup.ts"},"dist":{"shasum":"d60943feb6f8140522117e6576a923b715718380","tarball":"http://localhost:4260/glob/glob-10.4.4.tgz","fileCount":65,"integrity":"sha512-XsOKvHsu38Xe19ZQupE6N/HENeHQBA05o3hV8labZZT2zYDg1+emxWHnc/Bm9AcCMPXfD6jt+QC7zC5JSFyumw==","signatures":[{"sig":"MEUCIQCgHPF8XN3tuyJVZY/mk6XGnjI0czNt8rbIMYMlqgrw1QIgXnAz8HxtRhDCXenUQgfjYcEXPOH6Ylq+5q4a8fwDERc=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":475328},"main":"./dist/commonjs/index.js","tshy":{"main":true,"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","types":"./dist/commonjs/index.d.ts","module":"./dist/esm/index.js","engines":{"node":"14 >=14.21 || 16 >=16.20 || 18 || 20 || >=22"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","source":"./src/index.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","source":"./src/index.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"78275168e1bbc7a61e372af1ba58307c27faf0cb","scripts":{"prof":"bash prof.sh","snap":"tap","test":"tap","bench":"bash benchmark.sh","format":"prettier --write . --log-level warn","prepare":"tshy","preprof":"npm run prepare","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig .tshy/esm.json ./src/*.ts","prebench":"npm run prepare","profclean":"rm -f v8.log profile.txt","benchclean":"node benchclean.cjs","prepublish":"npm run benchclean","preversion":"npm test","test-regen":"npm run profclean && TEST_REGEN=1 node --no-warnings --loader ts-node/esm test/00-setup.ts","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"prettier":{"semi":false,"useTabs":false,"tabWidth":2,"endOfLine":"lf","printWidth":75,"arrowParens":"avoid","singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"experimentalTernaries":true},"repository":{"url":"git://github.com/isaacs/node-glob.git","type":"git"},"_npmVersion":"10.7.0","description":"the most correct and second fastest glob implementation in JavaScript","directories":{},"_nodeVersion":"20.13.1","dependencies":{"minipass":"^7.1.2","jackspeak":"^3.1.2","minimatch":"^9.0.4","path-scurry":"^1.11.1","foreground-child":"^3.1.0","package-json-from-dist":"^1.0.0"},"_hasShrinkwrap":false,"devDependencies":{"tap":"^19.0.0","tshy":"^1.14.0","memfs":"^3.4.13","mkdirp":"^3.0.1","rimraf":"^5.0.7","typedoc":"^0.25.12","prettier":"^3.2.5","@types/node":"^20.11.30","sync-content":"^1.0.2"}}},"bugs":{"url":"https://github.com/isaacs/node-glob/issues"},"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"https://blog.izs.me/"},"license":"ISC","homepage":"https://github.com/isaacs/node-glob#readme","repository":{"type":"git","url":"git://github.com/isaacs/node-glob.git"},"description":"the most correct and second fastest glob implementation in JavaScript","readme":"# Glob\n\nMatch files using the patterns the shell uses.\n\nThe most correct and second fastest glob implementation in\nJavaScript. (See **Comparison to Other JavaScript Glob\nImplementations** at the bottom of this readme.)\n\n![a fun cartoon logo made of glob characters](https://github.com/isaacs/node-glob/raw/main/logo/glob.png)\n\n## Usage\n\nInstall with npm\n\n```\nnpm i glob\n```\n\n**Note** the npm package name is _not_ `node-glob` that's a\ndifferent thing that was abandoned years ago. Just `glob`.\n\n```js\n// load using import\nimport { glob, globSync, globStream, globStreamSync, Glob } from 'glob'\n// or using commonjs, that's fine, too\nconst {\n  glob,\n  globSync,\n  globStream,\n  globStreamSync,\n  Glob,\n} = require('glob')\n\n// the main glob() and globSync() resolve/return array of filenames\n\n// all js files, but don't look in node_modules\nconst jsfiles = await glob('**/*.js', { ignore: 'node_modules/**' })\n\n// pass in a signal to cancel the glob walk\nconst stopAfter100ms = await glob('**/*.css', {\n  signal: AbortSignal.timeout(100),\n})\n\n// multiple patterns supported as well\nconst images = await glob(['css/*.{png,jpeg}', 'public/*.{png,jpeg}'])\n\n// but of course you can do that with the glob pattern also\n// the sync function is the same, just returns a string[] instead\n// of Promise<string[]>\nconst imagesAlt = globSync('{css,public}/*.{png,jpeg}')\n\n// you can also stream them, this is a Minipass stream\nconst filesStream = globStream(['**/*.dat', 'logs/**/*.log'])\n\n// construct a Glob object if you wanna do it that way, which\n// allows for much faster walks if you have to look in the same\n// folder multiple times.\nconst g = new Glob('**/foo', {})\n// glob objects are async iterators, can also do globIterate() or\n// g.iterate(), same deal\nfor await (const file of g) {\n  console.log('found a foo file:', file)\n}\n// pass a glob as the glob options to reuse its settings and caches\nconst g2 = new Glob('**/bar', g)\n// sync iteration works as well\nfor (const file of g2) {\n  console.log('found a bar file:', file)\n}\n\n// you can also pass withFileTypes: true to get Path objects\n// these are like a Dirent, but with some more added powers\n// check out http://npm.im/path-scurry for more info on their API\nconst g3 = new Glob('**/baz/**', { withFileTypes: true })\ng3.stream().on('data', path => {\n  console.log(\n    'got a path object',\n    path.fullpath(),\n    path.isDirectory(),\n    path.readdirSync().map(e => e.name),\n  )\n})\n\n// if you use stat:true and withFileTypes, you can sort results\n// by things like modified time, filter by permission mode, etc.\n// All Stats fields will be available in that case. Slightly\n// slower, though.\n// For example:\nconst results = await glob('**', { stat: true, withFileTypes: true })\n\nconst timeSortedFiles = results\n  .sort((a, b) => a.mtimeMs - b.mtimeMs)\n  .map(path => path.fullpath())\n\nconst groupReadableFiles = results\n  .filter(path => path.mode & 0o040)\n  .map(path => path.fullpath())\n\n// custom ignores can be done like this, for example by saying\n// you'll ignore all markdown files, and all folders named 'docs'\nconst customIgnoreResults = await glob('**', {\n  ignore: {\n    ignored: p => /\\.md$/.test(p.name),\n    childrenIgnored: p => p.isNamed('docs'),\n  },\n})\n\n// another fun use case, only return files with the same name as\n// their parent folder, plus either `.ts` or `.js`\nconst folderNamedModules = await glob('**/*.{ts,js}', {\n  ignore: {\n    ignored: p => {\n      const pp = p.parent\n      return !(p.isNamed(pp.name + '.ts') || p.isNamed(pp.name + '.js'))\n    },\n  },\n})\n\n// find all files edited in the last hour, to do this, we ignore\n// all of them that are more than an hour old\nconst newFiles = await glob('**', {\n  // need stat so we have mtime\n  stat: true,\n  // only want the files, not the dirs\n  nodir: true,\n  ignore: {\n    ignored: p => {\n      return new Date() - p.mtime > 60 * 60 * 1000\n    },\n    // could add similar childrenIgnored here as well, but\n    // directory mtime is inconsistent across platforms, so\n    // probably better not to, unless you know the system\n    // tracks this reliably.\n  },\n})\n```\n\n**Note** Glob patterns should always use `/` as a path separator,\neven on Windows systems, as `\\` is used to escape glob\ncharacters. If you wish to use `\\` as a path separator _instead\nof_ using it as an escape character on Windows platforms, you may\nset `windowsPathsNoEscape:true` in the options. In this mode,\nspecial glob characters cannot be escaped, making it impossible\nto match a literal `*` `?` and so on in filenames.\n\n## Command Line Interface\n\n```\n$ glob -h\n\nUsage:\n  glob [options] [<pattern> [<pattern> ...]]\n\nExpand the positional glob expression arguments into any matching file system\npaths found.\n\n  -c<command> --cmd=<command>\n                         Run the command provided, passing the glob expression\n                         matches as arguments.\n\n  -A --all               By default, the glob cli command will not expand any\n                         arguments that are an exact match to a file on disk.\n\n                         This prevents double-expanding, in case the shell\n                         expands an argument whose filename is a glob\n                         expression.\n\n                         For example, if 'app/*.ts' would match 'app/[id].ts',\n                         then on Windows powershell or cmd.exe, 'glob app/*.ts'\n                         will expand to 'app/[id].ts', as expected. However, in\n                         posix shells such as bash or zsh, the shell will first\n                         expand 'app/*.ts' to a list of filenames. Then glob\n                         will look for a file matching 'app/[id].ts' (ie,\n                         'app/i.ts' or 'app/d.ts'), which is unexpected.\n\n                         Setting '--all' prevents this behavior, causing glob to\n                         treat ALL patterns as glob expressions to be expanded,\n                         even if they are an exact match to a file on disk.\n\n                         When setting this option, be sure to enquote arguments\n                         so that the shell will not expand them prior to passing\n                         them to the glob command process.\n\n  -a --absolute          Expand to absolute paths\n  -d --dot-relative      Prepend './' on relative matches\n  -m --mark              Append a / on any directories matched\n  -x --posix             Always resolve to posix style paths, using '/' as the\n                         directory separator, even on Windows. Drive letter\n                         absolute matches on Windows will be expanded to their\n                         full resolved UNC maths, eg instead of 'C:\\foo\\bar', it\n                         will expand to '//?/C:/foo/bar'.\n\n  -f --follow            Follow symlinked directories when expanding '**'\n  -R --realpath          Call 'fs.realpath' on all of the results. In the case\n                         of an entry that cannot be resolved, the entry is\n                         omitted. This incurs a slight performance penalty, of\n                         course, because of the added system calls.\n\n  -s --stat              Call 'fs.lstat' on all entries, whether required or not\n                         to determine if it's a valid match.\n\n  -b --match-base        Perform a basename-only match if the pattern does not\n                         contain any slash characters. That is, '*.js' would be\n                         treated as equivalent to '**/*.js', matching js files\n                         in all directories.\n\n  --dot                  Allow patterns to match files/directories that start\n                         with '.', even if the pattern does not start with '.'\n\n  --nobrace              Do not expand {...} patterns\n  --nocase               Perform a case-insensitive match. This defaults to\n                         'true' on macOS and Windows platforms, and false on all\n                         others.\n\n                         Note: 'nocase' should only be explicitly set when it is\n                         known that the filesystem's case sensitivity differs\n                         from the platform default. If set 'true' on\n                         case-insensitive file systems, then the walk may return\n                         more or less results than expected.\n\n  --nodir                Do not match directories, only files.\n\n                         Note: to *only* match directories, append a '/' at the\n                         end of the pattern.\n\n  --noext                Do not expand extglob patterns, such as '+(a|b)'\n  --noglobstar           Do not expand '**' against multiple path portions. Ie,\n                         treat it as a normal '*' instead.\n\n  --windows-path-no-escape\n                         Use '\\' as a path separator *only*, and *never* as an\n                         escape character. If set, all '\\' characters are\n                         replaced with '/' in the pattern.\n\n  -D<n> --max-depth=<n>  Maximum depth to traverse from the current working\n                         directory\n\n  -C<cwd> --cwd=<cwd>    Current working directory to execute/match in\n  -r<root> --root=<root> A string path resolved against the 'cwd', which is used\n                         as the starting point for absolute patterns that start\n                         with '/' (but not drive letters or UNC paths on\n                         Windows).\n\n                         Note that this *doesn't* necessarily limit the walk to\n                         the 'root' directory, and doesn't affect the cwd\n                         starting point for non-absolute patterns. A pattern\n                         containing '..' will still be able to traverse out of\n                         the root directory, if it is not an actual root\n                         directory on the filesystem, and any non-absolute\n                         patterns will still be matched in the 'cwd'.\n\n                         To start absolute and non-absolute patterns in the same\n                         path, you can use '--root=' to set it to the empty\n                         string. However, be aware that on Windows systems, a\n                         pattern like 'x:/*' or '//host/share/*' will *always*\n                         start in the 'x:/' or '//host/share/' directory,\n                         regardless of the --root setting.\n\n  --platform=<platform>  Defaults to the value of 'process.platform' if\n                         available, or 'linux' if not. Setting --platform=win32\n                         on non-Windows systems may cause strange behavior!\n\n  -i<ignore> --ignore=<ignore>\n                         Glob patterns to ignore Can be set multiple times\n  -v --debug             Output a huge amount of noisy debug information about\n                         patterns as they are parsed and used to match files.\n\n  -h --help              Show this usage information\n```\n\n## `glob(pattern: string | string[], options?: GlobOptions) => Promise<string[] | Path[]>`\n\nPerform an asynchronous glob search for the pattern(s) specified.\nReturns\n[Path](https://isaacs.github.io/path-scurry/classes/PathBase)\nobjects if the `withFileTypes` option is set to `true`. See below\nfor full options field desciptions.\n\n## `globSync(pattern: string | string[], options?: GlobOptions) => string[] | Path[]`\n\nSynchronous form of `glob()`.\n\nAlias: `glob.sync()`\n\n## `globIterate(pattern: string | string[], options?: GlobOptions) => AsyncGenerator<string>`\n\nReturn an async iterator for walking glob pattern matches.\n\nAlias: `glob.iterate()`\n\n## `globIterateSync(pattern: string | string[], options?: GlobOptions) => Generator<string>`\n\nReturn a sync iterator for walking glob pattern matches.\n\nAlias: `glob.iterate.sync()`, `glob.sync.iterate()`\n\n## `globStream(pattern: string | string[], options?: GlobOptions) => Minipass<string | Path>`\n\nReturn a stream that emits all the strings or `Path` objects and\nthen emits `end` when completed.\n\nAlias: `glob.stream()`\n\n## `globStreamSync(pattern: string | string[], options?: GlobOptions) => Minipass<string | Path>`\n\nSyncronous form of `globStream()`. Will read all the matches as\nfast as you consume them, even all in a single tick if you\nconsume them immediately, but will still respond to backpressure\nif they're not consumed immediately.\n\nAlias: `glob.stream.sync()`, `glob.sync.stream()`\n\n## `hasMagic(pattern: string | string[], options?: GlobOptions) => boolean`\n\nReturns `true` if the provided pattern contains any \"magic\" glob\ncharacters, given the options provided.\n\nBrace expansion is not considered \"magic\" unless the\n`magicalBraces` option is set, as brace expansion just turns one\nstring into an array of strings. So a pattern like `'x{a,b}y'`\nwould return `false`, because `'xay'` and `'xby'` both do not\ncontain any magic glob characters, and it's treated the same as\nif you had called it on `['xay', 'xby']`. When\n`magicalBraces:true` is in the options, brace expansion _is_\ntreated as a pattern having magic.\n\n## `escape(pattern: string, options?: GlobOptions) => string`\n\nEscape all magic characters in a glob pattern, so that it will\nonly ever match literal strings\n\nIf the `windowsPathsNoEscape` option is used, then characters are\nescaped by wrapping in `[]`, because a magic character wrapped in\na character class can only be satisfied by that exact character.\n\nSlashes (and backslashes in `windowsPathsNoEscape` mode) cannot\nbe escaped or unescaped.\n\n## `unescape(pattern: string, options?: GlobOptions) => string`\n\nUn-escape a glob string that may contain some escaped characters.\n\nIf the `windowsPathsNoEscape` option is used, then square-brace\nescapes are removed, but not backslash escapes. For example, it\nwill turn the string `'[*]'` into `*`, but it will not turn\n`'\\\\*'` into `'*'`, because `\\` is a path separator in\n`windowsPathsNoEscape` mode.\n\nWhen `windowsPathsNoEscape` is not set, then both brace escapes\nand backslash escapes are removed.\n\nSlashes (and backslashes in `windowsPathsNoEscape` mode) cannot\nbe escaped or unescaped.\n\n## Class `Glob`\n\nAn object that can perform glob pattern traversals.\n\n### `const g = new Glob(pattern: string | string[], options: GlobOptions)`\n\nOptions object is required.\n\nSee full options descriptions below.\n\nNote that a previous `Glob` object can be passed as the\n`GlobOptions` to another `Glob` instantiation to re-use settings\nand caches with a new pattern.\n\nTraversal functions can be called multiple times to run the walk\nagain.\n\n### `g.stream()`\n\nStream results asynchronously,\n\n### `g.streamSync()`\n\nStream results synchronously.\n\n### `g.iterate()`\n\nDefault async iteration function. Returns an AsyncGenerator that\niterates over the results.\n\n### `g.iterateSync()`\n\nDefault sync iteration function. Returns a Generator that\niterates over the results.\n\n### `g.walk()`\n\nReturns a Promise that resolves to the results array.\n\n### `g.walkSync()`\n\nReturns a results array.\n\n### Properties\n\nAll options are stored as properties on the `Glob` object.\n\n- `opts` The options provided to the constructor.\n- `patterns` An array of parsed immutable `Pattern` objects.\n\n## Options\n\nExported as `GlobOptions` TypeScript interface. A `GlobOptions`\nobject may be provided to any of the exported methods, and must\nbe provided to the `Glob` constructor.\n\nAll options are optional, boolean, and false by default, unless\notherwise noted.\n\nAll resolved options are added to the Glob object as properties.\n\nIf you are running many `glob` operations, you can pass a Glob\nobject as the `options` argument to a subsequent operation to\nshare the previously loaded cache.\n\n- `cwd` String path or `file://` string or URL object. The\n  current working directory in which to search. Defaults to\n  `process.cwd()`. See also: \"Windows, CWDs, Drive Letters, and\n  UNC Paths\", below.\n\n  This option may be either a string path or a `file://` URL\n  object or string.\n\n- `root` A string path resolved against the `cwd` option, which\n  is used as the starting point for absolute patterns that start\n  with `/`, (but not drive letters or UNC paths on Windows).\n\n  Note that this _doesn't_ necessarily limit the walk to the\n  `root` directory, and doesn't affect the cwd starting point for\n  non-absolute patterns. A pattern containing `..` will still be\n  able to traverse out of the root directory, if it is not an\n  actual root directory on the filesystem, and any non-absolute\n  patterns will be matched in the `cwd`. For example, the\n  pattern `/../*` with `{root:'/some/path'}` will return all\n  files in `/some`, not all files in `/some/path`. The pattern\n  `*` with `{root:'/some/path'}` will return all the entries in\n  the cwd, not the entries in `/some/path`.\n\n  To start absolute and non-absolute patterns in the same\n  path, you can use `{root:''}`. However, be aware that on\n  Windows systems, a pattern like `x:/*` or `//host/share/*` will\n  _always_ start in the `x:/` or `//host/share` directory,\n  regardless of the `root` setting.\n\n- `windowsPathsNoEscape` Use `\\\\` as a path separator _only_, and\n  _never_ as an escape character. If set, all `\\\\` characters are\n  replaced with `/` in the pattern.\n\n  Note that this makes it **impossible** to match against paths\n  containing literal glob pattern characters, but allows matching\n  with patterns constructed using `path.join()` and\n  `path.resolve()` on Windows platforms, mimicking the (buggy!)\n  behavior of Glob v7 and before on Windows. Please use with\n  caution, and be mindful of [the caveat below about Windows\n  paths](#windows). (For legacy reasons, this is also set if\n  `allowWindowsEscape` is set to the exact value `false`.)\n\n- `dot` Include `.dot` files in normal matches and `globstar`\n  matches. Note that an explicit dot in a portion of the pattern\n  will always match dot files.\n\n- `magicalBraces` Treat brace expansion like `{a,b}` as a \"magic\"\n  pattern. Has no effect if {@link nobrace} is set.\n\n  Only has effect on the {@link hasMagic} function, no effect on\n  glob pattern matching itself.\n\n- `dotRelative` Prepend all relative path strings with `./` (or\n  `.\\` on Windows).\n\n  Without this option, returned relative paths are \"bare\", so\n  instead of returning `'./foo/bar'`, they are returned as\n  `'foo/bar'`.\n\n  Relative patterns starting with `'../'` are not prepended with\n  `./`, even if this option is set.\n\n- `mark` Add a `/` character to directory matches. Note that this\n  requires additional stat calls.\n\n- `nobrace` Do not expand `{a,b}` and `{1..3}` brace sets.\n\n- `noglobstar` Do not match `**` against multiple filenames. (Ie,\n  treat it as a normal `*` instead.)\n\n- `noext` Do not match \"extglob\" patterns such as `+(a|b)`.\n\n- `nocase` Perform a case-insensitive match. This defaults to\n  `true` on macOS and Windows systems, and `false` on all others.\n\n  **Note** `nocase` should only be explicitly set when it is\n  known that the filesystem's case sensitivity differs from the\n  platform default. If set `true` on case-sensitive file\n  systems, or `false` on case-insensitive file systems, then the\n  walk may return more or less results than expected.\n\n- `maxDepth` Specify a number to limit the depth of the directory\n  traversal to this many levels below the `cwd`.\n\n- `matchBase` Perform a basename-only match if the pattern does\n  not contain any slash characters. That is, `*.js` would be\n  treated as equivalent to `**/*.js`, matching all js files in\n  all directories.\n\n- `nodir` Do not match directories, only files. (Note: to match\n  _only_ directories, put a `/` at the end of the pattern.)\n\n  Note: when `follow` and `nodir` are both set, then symbolic\n  links to directories are also omitted.\n\n- `stat` Call `lstat()` on all entries, whether required or not\n  to determine whether it's a valid match. When used with\n  `withFileTypes`, this means that matches will include data such\n  as modified time, permissions, and so on. Note that this will\n  incur a performance cost due to the added system calls.\n\n- `ignore` string or string[], or an object with `ignore` and\n  `ignoreChildren` methods.\n\n  If a string or string[] is provided, then this is treated as a\n  glob pattern or array of glob patterns to exclude from matches.\n  To ignore all children within a directory, as well as the entry\n  itself, append `'/**'` to the ignore pattern.\n\n  **Note** `ignore` patterns are _always_ in `dot:true` mode,\n  regardless of any other settings.\n\n  If an object is provided that has `ignored(path)` and/or\n  `childrenIgnored(path)` methods, then these methods will be\n  called to determine whether any Path is a match or if its\n  children should be traversed, respectively.\n\n- `follow` Follow symlinked directories when expanding `**`\n  patterns. This can result in a lot of duplicate references in\n  the presence of cyclic links, and make performance quite bad.\n\n  By default, a `**` in a pattern will follow 1 symbolic link if\n  it is not the first item in the pattern, or none if it is the\n  first item in the pattern, following the same behavior as Bash.\n\n  Note: when `follow` and `nodir` are both set, then symbolic\n  links to directories are also omitted.\n\n- `realpath` Set to true to call `fs.realpath` on all of the\n  results. In the case of an entry that cannot be resolved, the\n  entry is omitted. This incurs a slight performance penalty, of\n  course, because of the added system calls.\n\n- `absolute` Set to true to always receive absolute paths for\n  matched files. Set to `false` to always receive relative paths\n  for matched files.\n\n  By default, when this option is not set, absolute paths are\n  returned for patterns that are absolute, and otherwise paths\n  are returned that are relative to the `cwd` setting.\n\n  This does _not_ make an extra system call to get the realpath,\n  it only does string path resolution.\n\n  `absolute` may not be used along with `withFileTypes`.\n\n- `posix` Set to true to use `/` as the path separator in\n  returned results. On posix systems, this has no effect. On\n  Windows systems, this will return `/` delimited path results,\n  and absolute paths will be returned in their full resolved UNC\n  path form, eg insted of `'C:\\\\foo\\\\bar'`, it will return\n  `//?/C:/foo/bar`.\n\n- `platform` Defaults to value of `process.platform` if\n  available, or `'linux'` if not. Setting `platform:'win32'` on\n  non-Windows systems may cause strange behavior.\n\n- `withFileTypes` Return [PathScurry](http://npm.im/path-scurry)\n  `Path` objects instead of strings. These are similar to a\n  NodeJS `Dirent` object, but with additional methods and\n  properties.\n\n  `withFileTypes` may not be used along with `absolute`.\n\n- `signal` An AbortSignal which will cancel the Glob walk when\n  triggered.\n\n- `fs` An override object to pass in custom filesystem methods.\n  See [PathScurry docs](http://npm.im/path-scurry) for what can\n  be overridden.\n\n- `scurry` A [PathScurry](http://npm.im/path-scurry) object used\n  to traverse the file system. If the `nocase` option is set\n  explicitly, then any provided `scurry` object must match this\n  setting.\n\n- `includeChildMatches` boolean, default `true`. Do not match any\n  children of any matches. For example, the pattern `**\\/foo`\n  would match `a/foo`, but not `a/foo/b/foo` in this mode.\n\n  This is especially useful for cases like \"find all\n  `node_modules` folders, but not the ones in `node_modules`\".\n\n  In order to support this, the `Ignore` implementation must\n  support an `add(pattern: string)` method. If using the default\n  `Ignore` class, then this is fine, but if this is set to\n  `false`, and a custom `Ignore` is provided that does not have\n  an `add()` method, then it will throw an error.\n\n  **Caveat** It _only_ ignores matches that would be a descendant\n  of a previous match, and only if that descendant is matched\n  _after_ the ancestor is encountered. Since the file system walk\n  happens in indeterminate order, it's possible that a match will\n  already be added before its ancestor, if multiple or braced\n  patterns are used.\n\n  For example:\n\n  ```js\n  const results = await glob(\n    [\n      // likely to match first, since it's just a stat\n      'a/b/c/d/e/f',\n\n      // this pattern is more complicated! It must to various readdir()\n      // calls and test the results against a regular expression, and that\n      // is certainly going to take a little bit longer.\n      //\n      // So, later on, it encounters a match at 'a/b/c/d/e', but it's too\n      // late to ignore a/b/c/d/e/f, because it's already been emitted.\n      'a/[bdf]/?/[a-z]/*',\n    ],\n    { includeChildMatches: false },\n  )\n  ```\n\n  It's best to only set this to `false` if you can be reasonably\n  sure that no components of the pattern will potentially match\n  one another's file system descendants, or if the occasional\n  included child entry will not cause problems.\n\n## Glob Primer\n\nMuch more information about glob pattern expansion can be found\nby running `man bash` and searching for `Pattern Matching`.\n\n\"Globs\" are the patterns you type when you do stuff like `ls\n*.js` on the command line, or put `build/*` in a `.gitignore`\nfile.\n\nBefore parsing the path part patterns, braced sections are\nexpanded into a set. Braced sections start with `{` and end with\n`}`, with 2 or more comma-delimited sections within. Braced\nsections may contain slash characters, so `a{/b/c,bcd}` would\nexpand into `a/b/c` and `abcd`.\n\nThe following characters have special magic meaning when used in\na path portion. With the exception of `**`, none of these match\npath separators (ie, `/` on all platforms, and `\\` on Windows).\n\n- `*` Matches 0 or more characters in a single path portion.\n  When alone in a path portion, it must match at least 1\n  character. If `dot:true` is not specified, then `*` will not\n  match against a `.` character at the start of a path portion.\n- `?` Matches 1 character. If `dot:true` is not specified, then\n  `?` will not match against a `.` character at the start of a\n  path portion.\n- `[...]` Matches a range of characters, similar to a RegExp\n  range. If the first character of the range is `!` or `^` then\n  it matches any character not in the range. If the first\n  character is `]`, then it will be considered the same as `\\]`,\n  rather than the end of the character class.\n- `!(pattern|pattern|pattern)` Matches anything that does not\n  match any of the patterns provided. May _not_ contain `/`\n  characters. Similar to `*`, if alone in a path portion, then\n  the path portion must have at least one character.\n- `?(pattern|pattern|pattern)` Matches zero or one occurrence of\n  the patterns provided. May _not_ contain `/` characters.\n- `+(pattern|pattern|pattern)` Matches one or more occurrences of\n  the patterns provided. May _not_ contain `/` characters.\n- `*(a|b|c)` Matches zero or more occurrences of the patterns\n  provided. May _not_ contain `/` characters.\n- `@(pattern|pat*|pat?erN)` Matches exactly one of the patterns\n  provided. May _not_ contain `/` characters.\n- `**` If a \"globstar\" is alone in a path portion, then it\n  matches zero or more directories and subdirectories searching\n  for matches. It does not crawl symlinked directories, unless\n  `{follow:true}` is passed in the options object. A pattern\n  like `a/b/**` will only match `a/b` if it is a directory.\n  Follows 1 symbolic link if not the first item in the pattern,\n  or 0 if it is the first item, unless `follow:true` is set, in\n  which case it follows all symbolic links.\n\n`[:class:]` patterns are supported by this implementation, but\n`[=c=]` and `[.symbol.]` style class patterns are not.\n\n### Dots\n\nIf a file or directory path portion has a `.` as the first\ncharacter, then it will not match any glob pattern unless that\npattern's corresponding path part also has a `.` as its first\ncharacter.\n\nFor example, the pattern `a/.*/c` would match the file at\n`a/.b/c`. However the pattern `a/*/c` would not, because `*` does\nnot start with a dot character.\n\nYou can make glob treat dots as normal characters by setting\n`dot:true` in the options.\n\n### Basename Matching\n\nIf you set `matchBase:true` in the options, and the pattern has\nno slashes in it, then it will seek for any file anywhere in the\ntree with a matching basename. For example, `*.js` would match\n`test/simple/basic.js`.\n\n### Empty Sets\n\nIf no matching files are found, then an empty array is returned.\nThis differs from the shell, where the pattern itself is\nreturned. For example:\n\n```sh\n$ echo a*s*d*f\na*s*d*f\n```\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a\nworthwhile goal, some discrepancies exist between node-glob and\nother implementations, and are intentional.\n\nThe double-star character `**` is supported by default, unless\nthe `noglobstar` flag is set. This is supported in the manner of\nbsdglob and bash 5, where `**` only has special significance if\nit is the only thing in a path part. That is, `a/**/b` will match\n`a/x/y/b`, but `a/**b` will not.\n\nNote that symlinked directories are not traversed as part of a\n`**`, though their contents may match against subsequent portions\nof the pattern. This prevents infinite loops and duplicates and\nthe like. You can force glob to traverse symlinks with `**` by\nsetting `{follow:true}` in the options.\n\nThere is no equivalent of the `nonull` option. A pattern that\ndoes not find any matches simply resolves to nothing. (An empty\narray, immediately ended stream, etc.)\n\nIf brace expansion is not disabled, then it is performed before\nany other interpretation of the glob pattern. Thus, a pattern\nlike `+(a|{b),c)}`, which would not be valid in bash or zsh, is\nexpanded **first** into the set of `+(a|b)` and `+(a|c)`, and\nthose patterns are checked for validity. Since those two are\nvalid, matching proceeds.\n\nThe character class patterns `[:class:]` (posix standard named\nclasses) style class patterns are supported and unicode-aware,\nbut `[=c=]` (locale-specific character collation weight), and\n`[.symbol.]` (collating symbol), are not.\n\n### Repeated Slashes\n\nUnlike Bash and zsh, repeated `/` are always coalesced into a\nsingle path separator.\n\n### Comments and Negation\n\nPreviously, this module let you mark a pattern as a \"comment\" if\nit started with a `#` character, or a \"negated\" pattern if it\nstarted with a `!` character.\n\nThese options were deprecated in version 5, and removed in\nversion 6.\n\nTo specify things that should not match, use the `ignore` option.\n\n## Windows\n\n**Please only use forward-slashes in glob expressions.**\n\nThough windows uses either `/` or `\\` as its path separator, only\n`/` characters are used by this glob implementation. You must use\nforward-slashes **only** in glob expressions. Back-slashes will\nalways be interpreted as escape characters, not path separators.\n\nResults from absolute patterns such as `/foo/*` are mounted onto\nthe root setting using `path.join`. On windows, this will by\ndefault result in `/foo/*` matching `C:\\foo\\bar.txt`.\n\nTo automatically coerce all `\\` characters to `/` in pattern\nstrings, **thus making it impossible to escape literal glob\ncharacters**, you may set the `windowsPathsNoEscape` option to\n`true`.\n\n### Windows, CWDs, Drive Letters, and UNC Paths\n\nOn posix systems, when a pattern starts with `/`, any `cwd`\noption is ignored, and the traversal starts at `/`, plus any\nnon-magic path portions specified in the pattern.\n\nOn Windows systems, the behavior is similar, but the concept of\nan \"absolute path\" is somewhat more involved.\n\n#### UNC Paths\n\nA UNC path may be used as the start of a pattern on Windows\nplatforms. For example, a pattern like: `//?/x:/*` will return\nall file entries in the root of the `x:` drive. A pattern like\n`//ComputerName/Share/*` will return all files in the associated\nshare.\n\nUNC path roots are always compared case insensitively.\n\n#### Drive Letters\n\nA pattern starting with a drive letter, like `c:/*`, will search\nin that drive, regardless of any `cwd` option provided.\n\nIf the pattern starts with `/`, and is not a UNC path, and there\nis an explicit `cwd` option set with a drive letter, then the\ndrive letter in the `cwd` is used as the root of the directory\ntraversal.\n\nFor example, `glob('/tmp', { cwd: 'c:/any/thing' })` will return\n`['c:/tmp']` as the result.\n\nIf an explicit `cwd` option is not provided, and the pattern\nstarts with `/`, then the traversal will run on the root of the\ndrive provided as the `cwd` option. (That is, it is the result of\n`path.resolve('/')`.)\n\n## Race Conditions\n\nGlob searching, by its very nature, is susceptible to race\nconditions, since it relies on directory walking.\n\nAs a result, it is possible that a file that exists when glob\nlooks for it may have been deleted or modified by the time it\nreturns the result.\n\nBy design, this implementation caches all readdir calls that it\nmakes, in order to cut down on system overhead. However, this\nalso makes it even more susceptible to races, especially if the\ncache object is reused between glob calls.\n\nUsers are thus advised not to use a glob result as a guarantee of\nfilesystem state in the face of rapid changes. For the vast\nmajority of operations, this is never a problem.\n\n### See Also:\n\n- `man sh`\n- `man bash` [Pattern\n  Matching](https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html)\n- `man 3 fnmatch`\n- `man 5 gitignore`\n- [minimatch documentation](https://github.com/isaacs/minimatch)\n\n## Glob Logo\n\nGlob's logo was created by [Tanya\nBrassie](http://tanyabrassie.com/). Logo files can be found\n[here](https://github.com/isaacs/node-glob/tree/master/logo).\n\nThe logo is licensed under a [Creative Commons\nAttribution-ShareAlike 4.0 International\nLicense](https://creativecommons.org/licenses/by-sa/4.0/).\n\n## Contributing\n\nAny change to behavior (including bugfixes) must come with a\ntest.\n\nPatches that fail tests or reduce performance will be rejected.\n\n```sh\n# to run tests\nnpm test\n\n# to re-generate test fixtures\nnpm run test-regen\n\n# run the benchmarks\nnpm run bench\n\n# to profile javascript\nnpm run prof\n```\n\n## Comparison to Other JavaScript Glob Implementations\n\n**tl;dr**\n\n- If you want glob matching that is as faithful as possible to\n  Bash pattern expansion semantics, and as fast as possible\n  within that constraint, _use this module_.\n- If you are reasonably sure that the patterns you will encounter\n  are relatively simple, and want the absolutely fastest glob\n  matcher out there, _use [fast-glob](http://npm.im/fast-glob)_.\n- If you are reasonably sure that the patterns you will encounter\n  are relatively simple, and want the convenience of\n  automatically respecting `.gitignore` files, _use\n  [globby](http://npm.im/globby)_.\n\nThere are some other glob matcher libraries on npm, but these\nthree are (in my opinion, as of 2023) the best.\n\n---\n\n**full explanation**\n\nEvery library reflects a set of opinions and priorities in the\ntrade-offs it makes. Other than this library, I can personally\nrecommend both [globby](http://npm.im/globby) and\n[fast-glob](http://npm.im/fast-glob), though they differ in their\nbenefits and drawbacks.\n\nBoth have very nice APIs and are reasonably fast.\n\n`fast-glob` is, as far as I am aware, the fastest glob\nimplementation in JavaScript today. However, there are many\ncases where the choices that `fast-glob` makes in pursuit of\nspeed mean that its results differ from the results returned by\nBash and other sh-like shells, which may be surprising.\n\nIn my testing, `fast-glob` is around 10-20% faster than this\nmodule when walking over 200k files nested 4 directories\ndeep[1](#fn-webscale). However, there are some inconsistencies\nwith Bash matching behavior that this module does not suffer\nfrom:\n\n- `**` only matches files, not directories\n- `..` path portions are not handled unless they appear at the\n  start of the pattern\n- `./!(<pattern>)` will not match any files that _start_ with\n  `<pattern>`, even if they do not match `<pattern>`. For\n  example, `!(9).txt` will not match `9999.txt`.\n- Some brace patterns in the middle of a pattern will result in\n  failing to find certain matches.\n- Extglob patterns are allowed to contain `/` characters.\n\nGlobby exhibits all of the same pattern semantics as fast-glob,\n(as it is a wrapper around fast-glob) and is slightly slower than\nnode-glob (by about 10-20% in the benchmark test set, or in other\nwords, anywhere from 20-50% slower than fast-glob). However, it\nadds some API conveniences that may be worth the costs.\n\n- Support for `.gitignore` and other ignore files.\n- Support for negated globs (ie, patterns starting with `!`\n  rather than using a separate `ignore` option).\n\nThe priority of this module is \"correctness\" in the sense of\nperforming a glob pattern expansion as faithfully as possible to\nthe behavior of Bash and other sh-like shells, with as much speed\nas possible.\n\nNote that prior versions of `node-glob` are _not_ on this list.\nFormer versions of this module are far too slow for any cases\nwhere performance matters at all, and were designed with APIs\nthat are extremely dated by current JavaScript standards.\n\n---\n\n<small id=\"fn-webscale\">[1]: In the cases where this module\nreturns results and `fast-glob` doesn't, it's even faster, of\ncourse.</small>\n\n![lumpy space princess saying 'oh my GLOB'](https://github.com/isaacs/node-glob/raw/main/oh-my-glob.gif)\n\n### Benchmark Results\n\nFirst number is time, smaller is better.\n\nSecond number is the count of results returned.\n\n```\n--- pattern: '**' ---\n~~ sync ~~\nnode fast-glob sync             0m0.598s  200364\nnode globby sync                0m0.765s  200364\nnode current globSync mjs       0m0.683s  222656\nnode current glob syncStream    0m0.649s  222656\n~~ async ~~\nnode fast-glob async            0m0.350s  200364\nnode globby async               0m0.509s  200364\nnode current glob async mjs     0m0.463s  222656\nnode current glob stream        0m0.411s  222656\n\n--- pattern: '**/..' ---\n~~ sync ~~\nnode fast-glob sync             0m0.486s  0\nnode globby sync                0m0.769s  200364\nnode current globSync mjs       0m0.564s  2242\nnode current glob syncStream    0m0.583s  2242\n~~ async ~~\nnode fast-glob async            0m0.283s  0\nnode globby async               0m0.512s  200364\nnode current glob async mjs     0m0.299s  2242\nnode current glob stream        0m0.312s  2242\n\n--- pattern: './**/0/**/0/**/0/**/0/**/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.490s  10\nnode globby sync                0m0.517s  10\nnode current globSync mjs       0m0.540s  10\nnode current glob syncStream    0m0.550s  10\n~~ async ~~\nnode fast-glob async            0m0.290s  10\nnode globby async               0m0.296s  10\nnode current glob async mjs     0m0.278s  10\nnode current glob stream        0m0.302s  10\n\n--- pattern: './**/[01]/**/[12]/**/[23]/**/[45]/**/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.500s  160\nnode globby sync                0m0.528s  160\nnode current globSync mjs       0m0.556s  160\nnode current glob syncStream    0m0.573s  160\n~~ async ~~\nnode fast-glob async            0m0.283s  160\nnode globby async               0m0.301s  160\nnode current glob async mjs     0m0.306s  160\nnode current glob stream        0m0.322s  160\n\n--- pattern: './**/0/**/0/**/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.502s  5230\nnode globby sync                0m0.527s  5230\nnode current globSync mjs       0m0.544s  5230\nnode current glob syncStream    0m0.557s  5230\n~~ async ~~\nnode fast-glob async            0m0.285s  5230\nnode globby async               0m0.305s  5230\nnode current glob async mjs     0m0.304s  5230\nnode current glob stream        0m0.310s  5230\n\n--- pattern: '**/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.580s  200023\nnode globby sync                0m0.771s  200023\nnode current globSync mjs       0m0.685s  200023\nnode current glob syncStream    0m0.649s  200023\n~~ async ~~\nnode fast-glob async            0m0.349s  200023\nnode globby async               0m0.509s  200023\nnode current glob async mjs     0m0.427s  200023\nnode current glob stream        0m0.388s  200023\n\n--- pattern: '{**/*.txt,**/?/**/*.txt,**/?/**/?/**/*.txt,**/?/**/?/**/?/**/*.txt,**/?/**/?/**/?/**/?/**/*.txt}' ---\n~~ sync ~~\nnode fast-glob sync             0m0.589s  200023\nnode globby sync                0m0.771s  200023\nnode current globSync mjs       0m0.716s  200023\nnode current glob syncStream    0m0.684s  200023\n~~ async ~~\nnode fast-glob async            0m0.351s  200023\nnode globby async               0m0.518s  200023\nnode current glob async mjs     0m0.462s  200023\nnode current glob stream        0m0.468s  200023\n\n--- pattern: '**/5555/0000/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.496s  1000\nnode globby sync                0m0.519s  1000\nnode current globSync mjs       0m0.539s  1000\nnode current glob syncStream    0m0.567s  1000\n~~ async ~~\nnode fast-glob async            0m0.285s  1000\nnode globby async               0m0.299s  1000\nnode current glob async mjs     0m0.305s  1000\nnode current glob stream        0m0.301s  1000\n\n--- pattern: './**/0/**/../[01]/**/0/../**/0/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.484s  0\nnode globby sync                0m0.507s  0\nnode current globSync mjs       0m0.577s  4880\nnode current glob syncStream    0m0.586s  4880\n~~ async ~~\nnode fast-glob async            0m0.280s  0\nnode globby async               0m0.298s  0\nnode current glob async mjs     0m0.327s  4880\nnode current glob stream        0m0.324s  4880\n\n--- pattern: '**/????/????/????/????/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.547s  100000\nnode globby sync                0m0.673s  100000\nnode current globSync mjs       0m0.626s  100000\nnode current glob syncStream    0m0.618s  100000\n~~ async ~~\nnode fast-glob async            0m0.315s  100000\nnode globby async               0m0.414s  100000\nnode current glob async mjs     0m0.366s  100000\nnode current glob stream        0m0.345s  100000\n\n--- pattern: './{**/?{/**/?{/**/?{/**/?,,,,},,,,},,,,},,,}/**/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.588s  100000\nnode globby sync                0m0.670s  100000\nnode current globSync mjs       0m0.717s  200023\nnode current glob syncStream    0m0.687s  200023\n~~ async ~~\nnode fast-glob async            0m0.343s  100000\nnode globby async               0m0.418s  100000\nnode current glob async mjs     0m0.519s  200023\nnode current glob stream        0m0.451s  200023\n\n--- pattern: '**/!(0|9).txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.573s  160023\nnode globby sync                0m0.731s  160023\nnode current globSync mjs       0m0.680s  180023\nnode current glob syncStream    0m0.659s  180023\n~~ async ~~\nnode fast-glob async            0m0.345s  160023\nnode globby async               0m0.476s  160023\nnode current glob async mjs     0m0.427s  180023\nnode current glob stream        0m0.388s  180023\n\n--- pattern: './{*/**/../{*/**/../{*/**/../{*/**/../{*/**,,,,},,,,},,,,},,,,},,,,}/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.483s  0\nnode globby sync                0m0.512s  0\nnode current globSync mjs       0m0.811s  200023\nnode current glob syncStream    0m0.773s  200023\n~~ async ~~\nnode fast-glob async            0m0.280s  0\nnode globby async               0m0.299s  0\nnode current glob async mjs     0m0.617s  200023\nnode current glob stream        0m0.568s  200023\n\n--- pattern: './*/**/../*/**/../*/**/../*/**/../*/**/../*/**/../*/**/../*/**/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.485s  0\nnode globby sync                0m0.507s  0\nnode current globSync mjs       0m0.759s  200023\nnode current glob syncStream    0m0.740s  200023\n~~ async ~~\nnode fast-glob async            0m0.281s  0\nnode globby async               0m0.297s  0\nnode current glob async mjs     0m0.544s  200023\nnode current glob stream        0m0.464s  200023\n\n--- pattern: './*/**/../*/**/../*/**/../*/**/../*/**/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.486s  0\nnode globby sync                0m0.513s  0\nnode current globSync mjs       0m0.734s  200023\nnode current glob syncStream    0m0.696s  200023\n~~ async ~~\nnode fast-glob async            0m0.286s  0\nnode globby async               0m0.296s  0\nnode current glob async mjs     0m0.506s  200023\nnode current glob stream        0m0.483s  200023\n\n--- pattern: './0/**/../1/**/../2/**/../3/**/../4/**/../5/**/../6/**/../7/**/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.060s  0\nnode globby sync                0m0.074s  0\nnode current globSync mjs       0m0.067s  0\nnode current glob syncStream    0m0.066s  0\n~~ async ~~\nnode fast-glob async            0m0.060s  0\nnode globby async               0m0.075s  0\nnode current glob async mjs     0m0.066s  0\nnode current glob stream        0m0.067s  0\n\n--- pattern: './**/?/**/?/**/?/**/?/**/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.568s  100000\nnode globby sync                0m0.651s  100000\nnode current globSync mjs       0m0.619s  100000\nnode current glob syncStream    0m0.617s  100000\n~~ async ~~\nnode fast-glob async            0m0.332s  100000\nnode globby async               0m0.409s  100000\nnode current glob async mjs     0m0.372s  100000\nnode current glob stream        0m0.351s  100000\n\n--- pattern: '**/*/**/*/**/*/**/*/**' ---\n~~ sync ~~\nnode fast-glob sync             0m0.603s  200113\nnode globby sync                0m0.798s  200113\nnode current globSync mjs       0m0.730s  222137\nnode current glob syncStream    0m0.693s  222137\n~~ async ~~\nnode fast-glob async            0m0.356s  200113\nnode globby async               0m0.525s  200113\nnode current glob async mjs     0m0.508s  222137\nnode current glob stream        0m0.455s  222137\n\n--- pattern: './**/*/**/*/**/*/**/*/**/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.622s  200000\nnode globby sync                0m0.792s  200000\nnode current globSync mjs       0m0.722s  200000\nnode current glob syncStream    0m0.695s  200000\n~~ async ~~\nnode fast-glob async            0m0.369s  200000\nnode globby async               0m0.527s  200000\nnode current glob async mjs     0m0.502s  200000\nnode current glob stream        0m0.481s  200000\n\n--- pattern: '**/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.588s  200023\nnode globby sync                0m0.771s  200023\nnode current globSync mjs       0m0.684s  200023\nnode current glob syncStream    0m0.658s  200023\n~~ async ~~\nnode fast-glob async            0m0.352s  200023\nnode globby async               0m0.516s  200023\nnode current glob async mjs     0m0.432s  200023\nnode current glob stream        0m0.384s  200023\n\n--- pattern: './**/**/**/**/**/**/**/**/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.589s  200023\nnode globby sync                0m0.766s  200023\nnode current globSync mjs       0m0.682s  200023\nnode current glob syncStream    0m0.652s  200023\n~~ async ~~\nnode fast-glob async            0m0.352s  200023\nnode globby async               0m0.523s  200023\nnode current glob async mjs     0m0.436s  200023\nnode current glob stream        0m0.380s  200023\n\n--- pattern: '**/*/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.592s  200023\nnode globby sync                0m0.776s  200023\nnode current globSync mjs       0m0.691s  200023\nnode current glob syncStream    0m0.659s  200023\n~~ async ~~\nnode fast-glob async            0m0.357s  200023\nnode globby async               0m0.513s  200023\nnode current glob async mjs     0m0.471s  200023\nnode current glob stream        0m0.424s  200023\n\n--- pattern: '**/*/**/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.585s  200023\nnode globby sync                0m0.766s  200023\nnode current globSync mjs       0m0.694s  200023\nnode current glob syncStream    0m0.664s  200023\n~~ async ~~\nnode fast-glob async            0m0.350s  200023\nnode globby async               0m0.514s  200023\nnode current glob async mjs     0m0.472s  200023\nnode current glob stream        0m0.424s  200023\n\n--- pattern: '**/[0-9]/**/*.txt' ---\n~~ sync ~~\nnode fast-glob sync             0m0.544s  100000\nnode globby sync                0m0.636s  100000\nnode current globSync mjs       0m0.626s  100000\nnode current glob syncStream    0m0.621s  100000\n~~ async ~~\nnode fast-glob async            0m0.322s  100000\nnode globby async               0m0.404s  100000\nnode current glob async mjs     0m0.360s  100000\nnode current glob stream        0m0.352s  100000\n```\n","readmeFilename":"README.md"}
